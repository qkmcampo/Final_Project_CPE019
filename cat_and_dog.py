# -*- coding: utf-8 -*-
"""CAT and DOG

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1amarSh41un7aHCXgbH_w09qvdhyexuSs
"""

# -- Imports --
import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image

# -- Page Configuration --
st.set_page_config(page_title="🐾 Cat vs Dog Classifier", page_icon="🐶", layout="centered")

MODEL_PATH = "CAT_DOG_model.h5"
IMG_SIZE = (150, 150)
CLASS_NAMES = ['Cat', 'Dog']

# -- Load Model --
@st.cache_resource
def load_local_model():
    return load_model(MODEL_PATH)

model = load_local_model()

# -- Custom CSS Styling with Background --
st.markdown("""
    <style>
        body, .stApp {
            background-image: url("https://wallpaperaccess.com/full/1122730.jpg");  /* Replace with your preferred image */
            background-size: cover;
            background-attachment: fixed;
            background-repeat: no-repeat;
            color: black !important;
        }
        h1, h2, h3, h4, h5, h6, p, span, div {
            color: black !important;
        }
        .stButton>button {
            background-color: #007bff;
            color: white;
            font-weight: bold;
            border-radius: 10px;
            padding: 0.5em 1.5em;
        }
        .stButton>button:hover {
            background-color: #0056b3;
        }
        .footer {
            margin-top: 50px;
            text-align: center;
            font-size: 0.9rem;
            color: #000;
        }
        .centered-img img {
            border-radius: 15px;
            margin-top: 10px;
            box-shadow: 0 0 12px rgba(0,0,0,0.2);
        }
    </style>
""", unsafe_allow_html=True)

# -- Header Section --
st.markdown("<h1 style='text-align:center;'>🐶Cat & Dog🐱Classifier </h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align:center; font-size:18px;'>Upload a photo and let AI guess if it's a <strong>cat</strong> or a <strong>dog</strong>!</p>", unsafe_allow_html=True)
st.markdown("### 📤 Upload an image: ")

# -- File Upload --
uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    img = Image.open(uploaded_file).convert('RGB')

    # Display the image
    st.markdown("<div class='centered-img'>", unsafe_allow_html=True)
    st.image(img, caption="📷 Uploaded Image", width=300)
    st.markdown("</div>", unsafe_allow_html=True)

    # Preprocess
    img_resized = img.resize(IMG_SIZE)
    img_array = image.img_to_array(img_resized) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Prediction
    with st.spinner("🔍 Classifying..."):
        prediction = model.predict(img_array)[0]
        predicted_class = CLASS_NAMES[int(round(prediction[0]))]
        confidence = prediction[0] * 100 if predicted_class == 'Dog' else (1 - prediction[0]) * 100

    emoji = "🐶" if predicted_class == "Dog" else "🐱"

    # Display Results
    st.markdown("---")
    st.markdown("## 🧾 Prediction Result")
    st.success(f"🎯 **Prediction:** `{predicted_class}` {emoji}")
    st.metric("📊 Confidence", f"{confidence:.2f} %")
    st.progress(int(confidence))

# -- Footer --
st.markdown("""
    <style>
        .footer-text {
            font-size: 18px;
            font-weight: bold;
            text-align: center;
            color: black;
            margin-top: 50px;
        }
    </style>
    <div class='footer-text'>
        Campo,Keneth CPE019 - CPE32S1 <strong>Streamlit</strong>
    </div>
""", unsafe_allow_html=True)