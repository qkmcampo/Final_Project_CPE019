# -*- coding: utf-8 -*-
"""CAT and DOG

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1amarSh41un7aHCXgbH_w09qvdhyexuSs
"""

# -- Imports --
import streamlit as st
import numpy as np
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image

# -- Configuration --
st.set_page_config(page_title="🐾 Cat vs Dog Classifier", page_icon="🐶", layout="centered")

MODEL_PATH = "CAT_DOG_model.h5"
IMG_SIZE = (150, 150)
CLASS_NAMES = ['Cat', 'Dog']

# -- Load Model --
@st.cache_resource
def load_local_model():
    return load_model(MODEL_PATH)

model = load_local_model()

# -- Custom CSS for Better UI --
st.markdown("""
    <style>
        .stApp {
            background-color: #fdfdfd;
        }
        h1 {
            color: #4B8BBE;
            text-align: center;
            margin-bottom: 0;
        }
        .description {
            text-align: center;
            font-size: 18px;
            margin-bottom: 30px;
        }
        .footer {
            margin-top: 50px;
            text-align: center;
            color: #888;
            font-size: 0.9rem;
        }
        .stButton>button {
            background-color: #007bff;
            color: white;
            font-weight: bold;
            border-radius: 10px;
            padding: 0.5em 1.5em;
        }
        .stButton>button:hover {
            background-color: #0056b3;
        }
        .centered-img img {
            border-radius: 15px;
            margin-top: 10px;
            box-shadow: 0 0 12px rgba(0,0,0,0.15);
        }
    </style>
""", unsafe_allow_html=True)

# -- Title and Description --
st.markdown("<h1>Cat 🐱 & Dog 🐶 Classifier</h1>", unsafe_allow_html=True)
st.markdown("<div class='description'>Upload an image and let the AI predict whether it's a cat or a dog!</div>", unsafe_allow_html=True)
st.markdown("### 📤 Upload an image (JPG, JPEG, PNG)")

# -- Upload Image --
uploaded_file = st.file_uploader("", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    img = Image.open(uploaded_file).convert('RGB')

    # Display uploaded image
    st.markdown("<div class='centered-img'>", unsafe_allow_html=True)
    st.image(img, caption="📷 Uploaded Image", width=300)
    st.markdown("</div>", unsafe_allow_html=True)

    # Preprocess
    img_resized = img.resize(IMG_SIZE)
    img_array = image.img_to_array(img_resized) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Prediction
    with st.spinner("🔍 Classifying..."):
        prediction = model.predict(img_array)[0]
        predicted_class = CLASS_NAMES[int(round(prediction[0]))]
        confidence = prediction[0] * 100 if predicted_class == 'Dog' else (1 - prediction[0]) * 100

    # -- Display Result --
    emoji = "🐶" if predicted_class == "Dog" else "🐱"
    st.markdown("---")
    st.markdown("## 🧾 Prediction Result")
    st.success(f"🎯 **Prediction:** `{predicted_class}` {emoji}")
    st.metric("📊 Confidence", f"{confidence:.2f} %")
    st.progress(int(confidence))